# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: protocol.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='protocol.proto',
  package='spacepark.vision',
  syntax='proto3',
  serialized_pb=_b('\n\x0eprotocol.proto\x12\x10spacepark.vision\"@\n\tRectangle\x12\t\n\x01x\x18\x01 \x01(\x05\x12\t\n\x01y\x18\x02 \x01(\x05\x12\r\n\x05width\x18\x03 \x01(\x05\x12\x0e\n\x06height\x18\x04 \x01(\x05\"J\n\x0bTensorShape\x12\r\n\x05\x62\x61tch\x18\x01 \x01(\x05\x12\x0e\n\x06height\x18\x02 \x01(\x05\x12\r\n\x05width\x18\x03 \x01(\x05\x12\r\n\x05\x64\x65pth\x18\x04 \x01(\x05\"H\n\nByteTensor\x12,\n\x05shape\x18\x01 \x01(\x0b\x32\x1d.spacepark.vision.TensorShape\x12\x0c\n\x04\x64\x61ta\x18\x02 \x01(\x0c\"\x17\n\x05Tuple\x12\x0e\n\x06values\x18\x01 \x03(\x05\"s\n\x0b\x46loatTensor\x12,\n\x05shape\x18\x01 \x01(\x0b\x32\x1d.spacepark.vision.TensorShape\x12\x0c\n\x04\x64\x61ta\x18\x02 \x03(\x02\x12(\n\x07indices\x18\x03 \x03(\x0b\x32\x17.spacepark.vision.Tuple\"\xbf\x03\n\x0cSparseConfig\x12.\n\rlogical_shape\x18\x01 \x01(\x0b\x32\x17.spacepark.vision.Tuple\x12\x43\n\x0cthresholding\x18\x02 \x01(\x0b\x32+.spacepark.vision.SparseConfig.ThresholdingH\x00\x12M\n\x12\x66rom_sparse_tensor\x18\x03 \x01(\x0b\x32/.spacepark.vision.SparseConfig.FromSparseTensorH\x00\x1a\xa1\x01\n\x0cThresholding\x12\x11\n\tthreshold\x18\x01 \x01(\x02\x12\r\n\x05top_k\x18\x02 \x01(\x05\x12G\n\tto_ignore\x18\x03 \x03(\x0b\x32\x34.spacepark.vision.SparseConfig.Thresholding.ToIgnore\x1a&\n\x08ToIgnore\x12\x0b\n\x03\x64im\x18\x01 \x01(\x05\x12\r\n\x05label\x18\x02 \x01(\x05\x1a=\n\x10\x46romSparseTensor\x12\x13\n\x0btensor_name\x18\x01 \x01(\t\x12\x14\n\x0csqueeze_dims\x18\x02 \x03(\x05\x42\x08\n\x06\x63onfig\"0\n\x10TensorNormalizer\x12\x0c\n\x04mean\x18\x01 \x01(\x02\x12\x0e\n\x06stddev\x18\x02 \x01(\x02\"\xa2\x0f\n\x07Request\x12\x39\n\nload_model\x18\x01 \x01(\x0b\x32#.spacepark.vision.Request.LoadModelH\x00\x12=\n\x0cunload_model\x18\x02 \x01(\x0b\x32%.spacepark.vision.Request.UnloadModelH\x00\x12\x43\n\x0fimage_inference\x18\x03 \x01(\x0b\x32(.spacepark.vision.Request.ImageInferenceH\x00\x12P\n\x16start_camera_inference\x18\x04 \x01(\x0b\x32..spacepark.vision.Request.StartCameraInferenceH\x00\x12\x45\n\x10\x63\x61mera_inference\x18\x05 \x01(\x0b\x32).spacepark.vision.Request.CameraInferenceH\x00\x12N\n\x15stop_camera_inference\x18\x06 \x01(\x0b\x32-.spacepark.vision.Request.StopCameraInferenceH\x00\x12\x44\n\x10get_camera_state\x18\x07 \x01(\x0b\x32(.spacepark.vision.Request.GetCameraStateH\x00\x12>\n\rimu_self_test\x18\x08 \x01(\x0b\x32%.spacepark.vision.Request.ImuSelfTestH\x00\x12\x46\n\x11get_firmware_info\x18\t \x01(\x0b\x32).spacepark.vision.Request.GetFirmwareInfoH\x00\x12\x42\n\x0fget_system_info\x18\n \x01(\x0b\x32\'.spacepark.vision.Request.GetSystemInfoH\x00\x12J\n\x13get_inference_state\x18\x0b \x01(\x0b\x32+.spacepark.vision.Request.GetInferenceStateH\x00\x12\x30\n\x05reset\x18\x0c \x01(\x0b\x32\x1f.spacepark.vision.Request.ResetH\x00\x1a\xa8\x01\n\tLoadModel\x12\x12\n\nmodel_name\x18\x01 \x01(\t\x12\x32\n\x0binput_shape\x18\x02 \x01(\x0b\x32\x1d.spacepark.vision.TensorShape\x12<\n\x10input_normalizer\x18\x03 \x01(\x0b\x32\".spacepark.vision.TensorNormalizer\x12\x15\n\rcompute_graph\x18\x04 \x01(\x0c\x1a!\n\x0bUnloadModel\x12\x12\n\nmodel_name\x18\x01 \x01(\t\x1a\xf2\x02\n\x0eImageInference\x12\x12\n\nmodel_name\x18\x01 \x01(\t\x12,\n\x06tensor\x18\x02 \x01(\x0b\x32\x1c.spacepark.vision.ByteTensor\x12\x44\n\x06params\x18\x03 \x03(\x0b\x32\x34.spacepark.vision.Request.ImageInference.ParamsEntry\x12S\n\x0esparse_configs\x18\x04 \x03(\x0b\x32;.spacepark.vision.Request.ImageInference.SparseConfigsEntry\x1a-\n\x0bParamsEntry\x12\x0b\n\x03key\x18\x01 \x01(\t\x12\r\n\x05value\x18\x02 \x01(\t:\x02\x38\x01\x1aT\n\x12SparseConfigsEntry\x12\x0b\n\x03key\x18\x01 \x01(\t\x12-\n\x05value\x18\x02 \x01(\x0b\x32\x1e.spacepark.vision.SparseConfig:\x02\x38\x01\x1a\x83\x03\n\x14StartCameraInference\x12\x12\n\nmodel_name\x18\x01 \x01(\t\x12+\n\x06window\x18\x02 \x01(\x0b\x32\x1b.spacepark.vision.Rectangle\x12J\n\x06params\x18\x03 \x03(\x0b\x32:.spacepark.vision.Request.StartCameraInference.ParamsEntry\x12Y\n\x0esparse_configs\x18\x04 \x03(\x0b\x32\x41.spacepark.vision.Request.StartCameraInference.SparseConfigsEntry\x1a-\n\x0bParamsEntry\x12\x0b\n\x03key\x18\x01 \x01(\t\x12\r\n\x05value\x18\x02 \x01(\t:\x02\x38\x01\x1aT\n\x12SparseConfigsEntry\x12\x0b\n\x03key\x18\x01 \x01(\t\x12-\n\x05value\x18\x02 \x01(\x0b\x32\x1e.spacepark.vision.SparseConfig:\x02\x38\x01\x1a\x11\n\x0f\x43\x61meraInference\x1a\x15\n\x13StopCameraInference\x1a\x10\n\x0eGetCameraState\x1a\r\n\x0bImuSelfTest\x1a\x11\n\x0fGetFirmwareInfo\x1a\x0f\n\rGetSystemInfo\x1a\x13\n\x11GetInferenceState\x1a\x07\n\x05ResetB\t\n\x07request\"\xa9\x03\n\x0fInferenceResult\x12\x12\n\nmodel_name\x18\x01 \x01(\t\x12\r\n\x05width\x18\x02 \x01(\x05\x12\x0e\n\x06height\x18\x03 \x01(\x05\x12+\n\x06window\x18\x04 \x01(\x0b\x32\x1b.spacepark.vision.Rectangle\x12\x13\n\x0b\x64uration_ms\x18\x05 \x01(\x05\x12?\n\x07tensors\x18\x06 \x03(\x0b\x32..spacepark.vision.InferenceResult.TensorsEntry\x12\x36\n\x05\x66rame\x18\x07 \x01(\x0b\x32\'.spacepark.vision.InferenceResult.Frame\x1aM\n\x0cTensorsEntry\x12\x0b\n\x03key\x18\x01 \x01(\t\x12,\n\x05value\x18\x02 \x01(\x0b\x32\x1d.spacepark.vision.FloatTensor:\x02\x38\x01\x1aY\n\x05\x46rame\x12\r\n\x05index\x18\x01 \x01(\x05\x12\x14\n\x0ctimestamp_us\x18\x02 \x01(\x03\x12+\n\x05image\x18\x03 \x01(\x0b\x32\x1c.spacepark.vision.ByteTensor\"B\n\x0eInferenceState\x12\x15\n\rloaded_models\x18\x01 \x03(\t\x12\x19\n\x11processing_models\x18\x02 \x03(\t\"=\n\x0b\x43\x61meraState\x12\x0f\n\x07running\x18\x01 \x01(\x08\x12\r\n\x05width\x18\x02 \x01(\x05\x12\x0e\n\x06height\x18\x03 \x01(\x05\"<\n\x0c\x46irmwareInfo\x12\x15\n\rmajor_version\x18\x01 \x01(\x05\x12\x15\n\rminor_version\x18\x02 \x01(\x05\"A\n\nSystemInfo\x12\x16\n\x0euptime_seconds\x18\x01 \x01(\x05\x12\x1b\n\x13temperature_celsius\x18\x02 \x01(\x02\"\xd6\x03\n\x08Response\x12\x31\n\x06status\x18\x01 \x01(\x0b\x32!.spacepark.vision.Response.Status\x12=\n\x10inference_result\x18\x02 \x01(\x0b\x32!.spacepark.vision.InferenceResultH\x00\x12\x35\n\x0c\x63\x61mera_state\x18\x03 \x01(\x0b\x32\x1d.spacepark.vision.CameraStateH\x00\x12\x37\n\rfirmware_info\x18\x04 \x01(\x0b\x32\x1e.spacepark.vision.FirmwareInfoH\x00\x12\x33\n\x0bsystem_info\x18\x05 \x01(\x0b\x32\x1c.spacepark.vision.SystemInfoH\x00\x12;\n\x0finference_state\x18\x06 \x01(\x0b\x32 .spacepark.vision.InferenceStateH\x00\x1aj\n\x06Status\x12\x34\n\x04\x63ode\x18\x01 \x01(\x0e\x32&.spacepark.vision.Response.Status.Code\x12\x0f\n\x07message\x18\x02 \x01(\t\"\x19\n\x04\x43ode\x12\x06\n\x02OK\x10\x00\x12\t\n\x05\x45RROR\x10\x01\x42\n\n\x08responseb\x06proto3')
)
_sym_db.RegisterFileDescriptor(DESCRIPTOR)



_RESPONSE_STATUS_CODE = _descriptor.EnumDescriptor(
  name='Code',
  full_name='spacepark.vision.Response.Status.Code',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='OK', index=0, number=0,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ERROR', index=1, number=1,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=3973,
  serialized_end=3998,
)
_sym_db.RegisterEnumDescriptor(_RESPONSE_STATUS_CODE)


_RECTANGLE = _descriptor.Descriptor(
  name='Rectangle',
  full_name='spacepark.vision.Rectangle',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='x', full_name='spacepark.vision.Rectangle.x', index=0,
      number=1, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='y', full_name='spacepark.vision.Rectangle.y', index=1,
      number=2, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='width', full_name='spacepark.vision.Rectangle.width', index=2,
      number=3, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='height', full_name='spacepark.vision.Rectangle.height', index=3,
      number=4, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=36,
  serialized_end=100,
)


_TENSORSHAPE = _descriptor.Descriptor(
  name='TensorShape',
  full_name='spacepark.vision.TensorShape',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='batch', full_name='spacepark.vision.TensorShape.batch', index=0,
      number=1, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='height', full_name='spacepark.vision.TensorShape.height', index=1,
      number=2, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='width', full_name='spacepark.vision.TensorShape.width', index=2,
      number=3, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='depth', full_name='spacepark.vision.TensorShape.depth', index=3,
      number=4, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=102,
  serialized_end=176,
)


_BYTETENSOR = _descriptor.Descriptor(
  name='ByteTensor',
  full_name='spacepark.vision.ByteTensor',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='shape', full_name='spacepark.vision.ByteTensor.shape', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='data', full_name='spacepark.vision.ByteTensor.data', index=1,
      number=2, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value=_b(""),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=178,
  serialized_end=250,
)


_TUPLE = _descriptor.Descriptor(
  name='Tuple',
  full_name='spacepark.vision.Tuple',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='values', full_name='spacepark.vision.Tuple.values', index=0,
      number=1, type=5, cpp_type=1, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=252,
  serialized_end=275,
)


_FLOATTENSOR = _descriptor.Descriptor(
  name='FloatTensor',
  full_name='spacepark.vision.FloatTensor',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='shape', full_name='spacepark.vision.FloatTensor.shape', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='data', full_name='spacepark.vision.FloatTensor.data', index=1,
      number=2, type=2, cpp_type=6, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='indices', full_name='spacepark.vision.FloatTensor.indices', index=2,
      number=3, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=277,
  serialized_end=392,
)


_SPARSECONFIG_THRESHOLDING_TOIGNORE = _descriptor.Descriptor(
  name='ToIgnore',
  full_name='spacepark.vision.SparseConfig.Thresholding.ToIgnore',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='dim', full_name='spacepark.vision.SparseConfig.Thresholding.ToIgnore.dim', index=0,
      number=1, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='label', full_name='spacepark.vision.SparseConfig.Thresholding.ToIgnore.label', index=1,
      number=2, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=731,
  serialized_end=769,
)

_SPARSECONFIG_THRESHOLDING = _descriptor.Descriptor(
  name='Thresholding',
  full_name='spacepark.vision.SparseConfig.Thresholding',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='threshold', full_name='spacepark.vision.SparseConfig.Thresholding.threshold', index=0,
      number=1, type=2, cpp_type=6, label=1,
      has_default_value=False, default_value=float(0),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='top_k', full_name='spacepark.vision.SparseConfig.Thresholding.top_k', index=1,
      number=2, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='to_ignore', full_name='spacepark.vision.SparseConfig.Thresholding.to_ignore', index=2,
      number=3, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[_SPARSECONFIG_THRESHOLDING_TOIGNORE, ],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=608,
  serialized_end=769,
)

_SPARSECONFIG_FROMSPARSETENSOR = _descriptor.Descriptor(
  name='FromSparseTensor',
  full_name='spacepark.vision.SparseConfig.FromSparseTensor',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='tensor_name', full_name='spacepark.vision.SparseConfig.FromSparseTensor.tensor_name', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='squeeze_dims', full_name='spacepark.vision.SparseConfig.FromSparseTensor.squeeze_dims', index=1,
      number=2, type=5, cpp_type=1, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=771,
  serialized_end=832,
)

_SPARSECONFIG = _descriptor.Descriptor(
  name='SparseConfig',
  full_name='spacepark.vision.SparseConfig',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='logical_shape', full_name='spacepark.vision.SparseConfig.logical_shape', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='thresholding', full_name='spacepark.vision.SparseConfig.thresholding', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='from_sparse_tensor', full_name='spacepark.vision.SparseConfig.from_sparse_tensor', index=2,
      number=3, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[_SPARSECONFIG_THRESHOLDING, _SPARSECONFIG_FROMSPARSETENSOR, ],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
    _descriptor.OneofDescriptor(
      name='config', full_name='spacepark.vision.SparseConfig.config',
      index=0, containing_type=None, fields=[]),
  ],
  serialized_start=395,
  serialized_end=842,
)


_TENSORNORMALIZER = _descriptor.Descriptor(
  name='TensorNormalizer',
  full_name='spacepark.vision.TensorNormalizer',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='mean', full_name='spacepark.vision.TensorNormalizer.mean', index=0,
      number=1, type=2, cpp_type=6, label=1,
      has_default_value=False, default_value=float(0),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='stddev', full_name='spacepark.vision.TensorNormalizer.stddev', index=1,
      number=2, type=2, cpp_type=6, label=1,
      has_default_value=False, default_value=float(0),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=844,
  serialized_end=892,
)


_REQUEST_LOADMODEL = _descriptor.Descriptor(
  name='LoadModel',
  full_name='spacepark.vision.Request.LoadModel',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='model_name', full_name='spacepark.vision.Request.LoadModel.model_name', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='input_shape', full_name='spacepark.vision.Request.LoadModel.input_shape', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='input_normalizer', full_name='spacepark.vision.Request.LoadModel.input_normalizer', index=2,
      number=3, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='compute_graph', full_name='spacepark.vision.Request.LoadModel.compute_graph', index=3,
      number=4, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value=_b(""),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1731,
  serialized_end=1899,
)

_REQUEST_UNLOADMODEL = _descriptor.Descriptor(
  name='UnloadModel',
  full_name='spacepark.vision.Request.UnloadModel',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='model_name', full_name='spacepark.vision.Request.UnloadModel.model_name', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1901,
  serialized_end=1934,
)

_REQUEST_IMAGEINFERENCE_PARAMSENTRY = _descriptor.Descriptor(
  name='ParamsEntry',
  full_name='spacepark.vision.Request.ImageInference.ParamsEntry',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='key', full_name='spacepark.vision.Request.ImageInference.ParamsEntry.key', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='value', full_name='spacepark.vision.Request.ImageInference.ParamsEntry.value', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\001')),
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=2176,
  serialized_end=2221,
)

_REQUEST_IMAGEINFERENCE_SPARSECONFIGSENTRY = _descriptor.Descriptor(
  name='SparseConfigsEntry',
  full_name='spacepark.vision.Request.ImageInference.SparseConfigsEntry',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='key', full_name='spacepark.vision.Request.ImageInference.SparseConfigsEntry.key', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='value', full_name='spacepark.vision.Request.ImageInference.SparseConfigsEntry.value', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\001')),
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=2223,
  serialized_end=2307,
)

_REQUEST_IMAGEINFERENCE = _descriptor.Descriptor(
  name='ImageInference',
  full_name='spacepark.vision.Request.ImageInference',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='model_name', full_name='spacepark.vision.Request.ImageInference.model_name', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='tensor', full_name='spacepark.vision.Request.ImageInference.tensor', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='params', full_name='spacepark.vision.Request.ImageInference.params', index=2,
      number=3, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='sparse_configs', full_name='spacepark.vision.Request.ImageInference.sparse_configs', index=3,
      number=4, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[_REQUEST_IMAGEINFERENCE_PARAMSENTRY, _REQUEST_IMAGEINFERENCE_SPARSECONFIGSENTRY, ],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1937,
  serialized_end=2307,
)

_REQUEST_STARTCAMERAINFERENCE_PARAMSENTRY = _descriptor.Descriptor(
  name='ParamsEntry',
  full_name='spacepark.vision.Request.StartCameraInference.ParamsEntry',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='key', full_name='spacepark.vision.Request.StartCameraInference.ParamsEntry.key', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='value', full_name='spacepark.vision.Request.StartCameraInference.ParamsEntry.value', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\001')),
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=2176,
  serialized_end=2221,
)

_REQUEST_STARTCAMERAINFERENCE_SPARSECONFIGSENTRY = _descriptor.Descriptor(
  name='SparseConfigsEntry',
  full_name='spacepark.vision.Request.StartCameraInference.SparseConfigsEntry',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='key', full_name='spacepark.vision.Request.StartCameraInference.SparseConfigsEntry.key', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='value', full_name='spacepark.vision.Request.StartCameraInference.SparseConfigsEntry.value', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\001')),
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=2223,
  serialized_end=2307,
)

_REQUEST_STARTCAMERAINFERENCE = _descriptor.Descriptor(
  name='StartCameraInference',
  full_name='spacepark.vision.Request.StartCameraInference',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='model_name', full_name='spacepark.vision.Request.StartCameraInference.model_name', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='window', full_name='spacepark.vision.Request.StartCameraInference.window', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='params', full_name='spacepark.vision.Request.StartCameraInference.params', index=2,
      number=3, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='sparse_configs', full_name='spacepark.vision.Request.StartCameraInference.sparse_configs', index=3,
      number=4, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[_REQUEST_STARTCAMERAINFERENCE_PARAMSENTRY, _REQUEST_STARTCAMERAINFERENCE_SPARSECONFIGSENTRY, ],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=2310,
  serialized_end=2697,
)

_REQUEST_CAMERAINFERENCE = _descriptor.Descriptor(
  name='CameraInference',
  full_name='spacepark.vision.Request.CameraInference',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=2699,
  serialized_end=2716,
)

_REQUEST_STOPCAMERAINFERENCE = _descriptor.Descriptor(
  name='StopCameraInference',
  full_name='spacepark.vision.Request.StopCameraInference',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=2718,
  serialized_end=2739,
)

_REQUEST_GETCAMERASTATE = _descriptor.Descriptor(
  name='GetCameraState',
  full_name='spacepark.vision.Request.GetCameraState',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=2741,
  serialized_end=2757,
)

_REQUEST_IMUSELFTEST = _descriptor.Descriptor(
  name='ImuSelfTest',
  full_name='spacepark.vision.Request.ImuSelfTest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=2759,
  serialized_end=2772,
)

_REQUEST_GETFIRMWAREINFO = _descriptor.Descriptor(
  name='GetFirmwareInfo',
  full_name='spacepark.vision.Request.GetFirmwareInfo',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=2774,
  serialized_end=2791,
)

_REQUEST_GETSYSTEMINFO = _descriptor.Descriptor(
  name='GetSystemInfo',
  full_name='spacepark.vision.Request.GetSystemInfo',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=2793,
  serialized_end=2808,
)

_REQUEST_GETINFERENCESTATE = _descriptor.Descriptor(
  name='GetInferenceState',
  full_name='spacepark.vision.Request.GetInferenceState',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=2810,
  serialized_end=2829,
)

_REQUEST_RESET = _descriptor.Descriptor(
  name='Reset',
  full_name='spacepark.vision.Request.Reset',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=2831,
  serialized_end=2838,
)

_REQUEST = _descriptor.Descriptor(
  name='Request',
  full_name='spacepark.vision.Request',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='load_model', full_name='spacepark.vision.Request.load_model', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='unload_model', full_name='spacepark.vision.Request.unload_model', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='image_inference', full_name='spacepark.vision.Request.image_inference', index=2,
      number=3, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='start_camera_inference', full_name='spacepark.vision.Request.start_camera_inference', index=3,
      number=4, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='camera_inference', full_name='spacepark.vision.Request.camera_inference', index=4,
      number=5, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='stop_camera_inference', full_name='spacepark.vision.Request.stop_camera_inference', index=5,
      number=6, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='get_camera_state', full_name='spacepark.vision.Request.get_camera_state', index=6,
      number=7, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='imu_self_test', full_name='spacepark.vision.Request.imu_self_test', index=7,
      number=8, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='get_firmware_info', full_name='spacepark.vision.Request.get_firmware_info', index=8,
      number=9, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='get_system_info', full_name='spacepark.vision.Request.get_system_info', index=9,
      number=10, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='get_inference_state', full_name='spacepark.vision.Request.get_inference_state', index=10,
      number=11, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='reset', full_name='spacepark.vision.Request.reset', index=11,
      number=12, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[_REQUEST_LOADMODEL, _REQUEST_UNLOADMODEL, _REQUEST_IMAGEINFERENCE, _REQUEST_STARTCAMERAINFERENCE, _REQUEST_CAMERAINFERENCE, _REQUEST_STOPCAMERAINFERENCE, _REQUEST_GETCAMERASTATE, _REQUEST_IMUSELFTEST, _REQUEST_GETFIRMWAREINFO, _REQUEST_GETSYSTEMINFO, _REQUEST_GETINFERENCESTATE, _REQUEST_RESET, ],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
    _descriptor.OneofDescriptor(
      name='request', full_name='spacepark.vision.Request.request',
      index=0, containing_type=None, fields=[]),
  ],
  serialized_start=895,
  serialized_end=2849,
)


_INFERENCERESULT_TENSORSENTRY = _descriptor.Descriptor(
  name='TensorsEntry',
  full_name='spacepark.vision.InferenceResult.TensorsEntry',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='key', full_name='spacepark.vision.InferenceResult.TensorsEntry.key', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='value', full_name='spacepark.vision.InferenceResult.TensorsEntry.value', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\001')),
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=3109,
  serialized_end=3186,
)

_INFERENCERESULT_FRAME = _descriptor.Descriptor(
  name='Frame',
  full_name='spacepark.vision.InferenceResult.Frame',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='index', full_name='spacepark.vision.InferenceResult.Frame.index', index=0,
      number=1, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='timestamp_us', full_name='spacepark.vision.InferenceResult.Frame.timestamp_us', index=1,
      number=2, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='image', full_name='spacepark.vision.InferenceResult.Frame.image', index=2,
      number=3, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=3188,
  serialized_end=3277,
)

_INFERENCERESULT = _descriptor.Descriptor(
  name='InferenceResult',
  full_name='spacepark.vision.InferenceResult',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='model_name', full_name='spacepark.vision.InferenceResult.model_name', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='width', full_name='spacepark.vision.InferenceResult.width', index=1,
      number=2, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='height', full_name='spacepark.vision.InferenceResult.height', index=2,
      number=3, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='window', full_name='spacepark.vision.InferenceResult.window', index=3,
      number=4, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='duration_ms', full_name='spacepark.vision.InferenceResult.duration_ms', index=4,
      number=5, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='tensors', full_name='spacepark.vision.InferenceResult.tensors', index=5,
      number=6, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='frame', full_name='spacepark.vision.InferenceResult.frame', index=6,
      number=7, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[_INFERENCERESULT_TENSORSENTRY, _INFERENCERESULT_FRAME, ],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=2852,
  serialized_end=3277,
)


_INFERENCESTATE = _descriptor.Descriptor(
  name='InferenceState',
  full_name='spacepark.vision.InferenceState',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='loaded_models', full_name='spacepark.vision.InferenceState.loaded_models', index=0,
      number=1, type=9, cpp_type=9, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='processing_models', full_name='spacepark.vision.InferenceState.processing_models', index=1,
      number=2, type=9, cpp_type=9, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=3279,
  serialized_end=3345,
)


_CAMERASTATE = _descriptor.Descriptor(
  name='CameraState',
  full_name='spacepark.vision.CameraState',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='running', full_name='spacepark.vision.CameraState.running', index=0,
      number=1, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='width', full_name='spacepark.vision.CameraState.width', index=1,
      number=2, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='height', full_name='spacepark.vision.CameraState.height', index=2,
      number=3, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=3347,
  serialized_end=3408,
)


_FIRMWAREINFO = _descriptor.Descriptor(
  name='FirmwareInfo',
  full_name='spacepark.vision.FirmwareInfo',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='major_version', full_name='spacepark.vision.FirmwareInfo.major_version', index=0,
      number=1, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='minor_version', full_name='spacepark.vision.FirmwareInfo.minor_version', index=1,
      number=2, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=3410,
  serialized_end=3470,
)


_SYSTEMINFO = _descriptor.Descriptor(
  name='SystemInfo',
  full_name='spacepark.vision.SystemInfo',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='uptime_seconds', full_name='spacepark.vision.SystemInfo.uptime_seconds', index=0,
      number=1, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='temperature_celsius', full_name='spacepark.vision.SystemInfo.temperature_celsius', index=1,
      number=2, type=2, cpp_type=6, label=1,
      has_default_value=False, default_value=float(0),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=3472,
  serialized_end=3537,
)


_RESPONSE_STATUS = _descriptor.Descriptor(
  name='Status',
  full_name='spacepark.vision.Response.Status',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='code', full_name='spacepark.vision.Response.Status.code', index=0,
      number=1, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='message', full_name='spacepark.vision.Response.Status.message', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
    _RESPONSE_STATUS_CODE,
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=3892,
  serialized_end=3998,
)

_RESPONSE = _descriptor.Descriptor(
  name='Response',
  full_name='spacepark.vision.Response',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='status', full_name='spacepark.vision.Response.status', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='inference_result', full_name='spacepark.vision.Response.inference_result', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='camera_state', full_name='spacepark.vision.Response.camera_state', index=2,
      number=3, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='firmware_info', full_name='spacepark.vision.Response.firmware_info', index=3,
      number=4, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='system_info', full_name='spacepark.vision.Response.system_info', index=4,
      number=5, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='inference_state', full_name='spacepark.vision.Response.inference_state', index=5,
      number=6, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[_RESPONSE_STATUS, ],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
    _descriptor.OneofDescriptor(
      name='response', full_name='spacepark.vision.Response.response',
      index=0, containing_type=None, fields=[]),
  ],
  serialized_start=3540,
  serialized_end=4010,
)

_BYTETENSOR.fields_by_name['shape'].message_type = _TENSORSHAPE
_FLOATTENSOR.fields_by_name['shape'].message_type = _TENSORSHAPE
_FLOATTENSOR.fields_by_name['indices'].message_type = _TUPLE
_SPARSECONFIG_THRESHOLDING_TOIGNORE.containing_type = _SPARSECONFIG_THRESHOLDING
_SPARSECONFIG_THRESHOLDING.fields_by_name['to_ignore'].message_type = _SPARSECONFIG_THRESHOLDING_TOIGNORE
_SPARSECONFIG_THRESHOLDING.containing_type = _SPARSECONFIG
_SPARSECONFIG_FROMSPARSETENSOR.containing_type = _SPARSECONFIG
_SPARSECONFIG.fields_by_name['logical_shape'].message_type = _TUPLE
_SPARSECONFIG.fields_by_name['thresholding'].message_type = _SPARSECONFIG_THRESHOLDING
_SPARSECONFIG.fields_by_name['from_sparse_tensor'].message_type = _SPARSECONFIG_FROMSPARSETENSOR
_SPARSECONFIG.oneofs_by_name['config'].fields.append(
  _SPARSECONFIG.fields_by_name['thresholding'])
_SPARSECONFIG.fields_by_name['thresholding'].containing_oneof = _SPARSECONFIG.oneofs_by_name['config']
_SPARSECONFIG.oneofs_by_name['config'].fields.append(
  _SPARSECONFIG.fields_by_name['from_sparse_tensor'])
_SPARSECONFIG.fields_by_name['from_sparse_tensor'].containing_oneof = _SPARSECONFIG.oneofs_by_name['config']
_REQUEST_LOADMODEL.fields_by_name['input_shape'].message_type = _TENSORSHAPE
_REQUEST_LOADMODEL.fields_by_name['input_normalizer'].message_type = _TENSORNORMALIZER
_REQUEST_LOADMODEL.containing_type = _REQUEST
_REQUEST_UNLOADMODEL.containing_type = _REQUEST
_REQUEST_IMAGEINFERENCE_PARAMSENTRY.containing_type = _REQUEST_IMAGEINFERENCE
_REQUEST_IMAGEINFERENCE_SPARSECONFIGSENTRY.fields_by_name['value'].message_type = _SPARSECONFIG
_REQUEST_IMAGEINFERENCE_SPARSECONFIGSENTRY.containing_type = _REQUEST_IMAGEINFERENCE
_REQUEST_IMAGEINFERENCE.fields_by_name['tensor'].message_type = _BYTETENSOR
_REQUEST_IMAGEINFERENCE.fields_by_name['params'].message_type = _REQUEST_IMAGEINFERENCE_PARAMSENTRY
_REQUEST_IMAGEINFERENCE.fields_by_name['sparse_configs'].message_type = _REQUEST_IMAGEINFERENCE_SPARSECONFIGSENTRY
_REQUEST_IMAGEINFERENCE.containing_type = _REQUEST
_REQUEST_STARTCAMERAINFERENCE_PARAMSENTRY.containing_type = _REQUEST_STARTCAMERAINFERENCE
_REQUEST_STARTCAMERAINFERENCE_SPARSECONFIGSENTRY.fields_by_name['value'].message_type = _SPARSECONFIG
_REQUEST_STARTCAMERAINFERENCE_SPARSECONFIGSENTRY.containing_type = _REQUEST_STARTCAMERAINFERENCE
_REQUEST_STARTCAMERAINFERENCE.fields_by_name['window'].message_type = _RECTANGLE
_REQUEST_STARTCAMERAINFERENCE.fields_by_name['params'].message_type = _REQUEST_STARTCAMERAINFERENCE_PARAMSENTRY
_REQUEST_STARTCAMERAINFERENCE.fields_by_name['sparse_configs'].message_type = _REQUEST_STARTCAMERAINFERENCE_SPARSECONFIGSENTRY
_REQUEST_STARTCAMERAINFERENCE.containing_type = _REQUEST
_REQUEST_CAMERAINFERENCE.containing_type = _REQUEST
_REQUEST_STOPCAMERAINFERENCE.containing_type = _REQUEST
_REQUEST_GETCAMERASTATE.containing_type = _REQUEST
_REQUEST_IMUSELFTEST.containing_type = _REQUEST
_REQUEST_GETFIRMWAREINFO.containing_type = _REQUEST
_REQUEST_GETSYSTEMINFO.containing_type = _REQUEST
_REQUEST_GETINFERENCESTATE.containing_type = _REQUEST
_REQUEST_RESET.containing_type = _REQUEST
_REQUEST.fields_by_name['load_model'].message_type = _REQUEST_LOADMODEL
_REQUEST.fields_by_name['unload_model'].message_type = _REQUEST_UNLOADMODEL
_REQUEST.fields_by_name['image_inference'].message_type = _REQUEST_IMAGEINFERENCE
_REQUEST.fields_by_name['start_camera_inference'].message_type = _REQUEST_STARTCAMERAINFERENCE
_REQUEST.fields_by_name['camera_inference'].message_type = _REQUEST_CAMERAINFERENCE
_REQUEST.fields_by_name['stop_camera_inference'].message_type = _REQUEST_STOPCAMERAINFERENCE
_REQUEST.fields_by_name['get_camera_state'].message_type = _REQUEST_GETCAMERASTATE
_REQUEST.fields_by_name['imu_self_test'].message_type = _REQUEST_IMUSELFTEST
_REQUEST.fields_by_name['get_firmware_info'].message_type = _REQUEST_GETFIRMWAREINFO
_REQUEST.fields_by_name['get_system_info'].message_type = _REQUEST_GETSYSTEMINFO
_REQUEST.fields_by_name['get_inference_state'].message_type = _REQUEST_GETINFERENCESTATE
_REQUEST.fields_by_name['reset'].message_type = _REQUEST_RESET
_REQUEST.oneofs_by_name['request'].fields.append(
  _REQUEST.fields_by_name['load_model'])
_REQUEST.fields_by_name['load_model'].containing_oneof = _REQUEST.oneofs_by_name['request']
_REQUEST.oneofs_by_name['request'].fields.append(
  _REQUEST.fields_by_name['unload_model'])
_REQUEST.fields_by_name['unload_model'].containing_oneof = _REQUEST.oneofs_by_name['request']
_REQUEST.oneofs_by_name['request'].fields.append(
  _REQUEST.fields_by_name['image_inference'])
_REQUEST.fields_by_name['image_inference'].containing_oneof = _REQUEST.oneofs_by_name['request']
_REQUEST.oneofs_by_name['request'].fields.append(
  _REQUEST.fields_by_name['start_camera_inference'])
_REQUEST.fields_by_name['start_camera_inference'].containing_oneof = _REQUEST.oneofs_by_name['request']
_REQUEST.oneofs_by_name['request'].fields.append(
  _REQUEST.fields_by_name['camera_inference'])
_REQUEST.fields_by_name['camera_inference'].containing_oneof = _REQUEST.oneofs_by_name['request']
_REQUEST.oneofs_by_name['request'].fields.append(
  _REQUEST.fields_by_name['stop_camera_inference'])
_REQUEST.fields_by_name['stop_camera_inference'].containing_oneof = _REQUEST.oneofs_by_name['request']
_REQUEST.oneofs_by_name['request'].fields.append(
  _REQUEST.fields_by_name['get_camera_state'])
_REQUEST.fields_by_name['get_camera_state'].containing_oneof = _REQUEST.oneofs_by_name['request']
_REQUEST.oneofs_by_name['request'].fields.append(
  _REQUEST.fields_by_name['imu_self_test'])
_REQUEST.fields_by_name['imu_self_test'].containing_oneof = _REQUEST.oneofs_by_name['request']
_REQUEST.oneofs_by_name['request'].fields.append(
  _REQUEST.fields_by_name['get_firmware_info'])
_REQUEST.fields_by_name['get_firmware_info'].containing_oneof = _REQUEST.oneofs_by_name['request']
_REQUEST.oneofs_by_name['request'].fields.append(
  _REQUEST.fields_by_name['get_system_info'])
_REQUEST.fields_by_name['get_system_info'].containing_oneof = _REQUEST.oneofs_by_name['request']
_REQUEST.oneofs_by_name['request'].fields.append(
  _REQUEST.fields_by_name['get_inference_state'])
_REQUEST.fields_by_name['get_inference_state'].containing_oneof = _REQUEST.oneofs_by_name['request']
_REQUEST.oneofs_by_name['request'].fields.append(
  _REQUEST.fields_by_name['reset'])
_REQUEST.fields_by_name['reset'].containing_oneof = _REQUEST.oneofs_by_name['request']
_INFERENCERESULT_TENSORSENTRY.fields_by_name['value'].message_type = _FLOATTENSOR
_INFERENCERESULT_TENSORSENTRY.containing_type = _INFERENCERESULT
_INFERENCERESULT_FRAME.fields_by_name['image'].message_type = _BYTETENSOR
_INFERENCERESULT_FRAME.containing_type = _INFERENCERESULT
_INFERENCERESULT.fields_by_name['window'].message_type = _RECTANGLE
_INFERENCERESULT.fields_by_name['tensors'].message_type = _INFERENCERESULT_TENSORSENTRY
_INFERENCERESULT.fields_by_name['frame'].message_type = _INFERENCERESULT_FRAME
_RESPONSE_STATUS.fields_by_name['code'].enum_type = _RESPONSE_STATUS_CODE
_RESPONSE_STATUS.containing_type = _RESPONSE
_RESPONSE_STATUS_CODE.containing_type = _RESPONSE_STATUS
_RESPONSE.fields_by_name['status'].message_type = _RESPONSE_STATUS
_RESPONSE.fields_by_name['inference_result'].message_type = _INFERENCERESULT
_RESPONSE.fields_by_name['camera_state'].message_type = _CAMERASTATE
_RESPONSE.fields_by_name['firmware_info'].message_type = _FIRMWAREINFO
_RESPONSE.fields_by_name['system_info'].message_type = _SYSTEMINFO
_RESPONSE.fields_by_name['inference_state'].message_type = _INFERENCESTATE
_RESPONSE.oneofs_by_name['response'].fields.append(
  _RESPONSE.fields_by_name['inference_result'])
_RESPONSE.fields_by_name['inference_result'].containing_oneof = _RESPONSE.oneofs_by_name['response']
_RESPONSE.oneofs_by_name['response'].fields.append(
  _RESPONSE.fields_by_name['camera_state'])
_RESPONSE.fields_by_name['camera_state'].containing_oneof = _RESPONSE.oneofs_by_name['response']
_RESPONSE.oneofs_by_name['response'].fields.append(
  _RESPONSE.fields_by_name['firmware_info'])
_RESPONSE.fields_by_name['firmware_info'].containing_oneof = _RESPONSE.oneofs_by_name['response']
_RESPONSE.oneofs_by_name['response'].fields.append(
  _RESPONSE.fields_by_name['system_info'])
_RESPONSE.fields_by_name['system_info'].containing_oneof = _RESPONSE.oneofs_by_name['response']
_RESPONSE.oneofs_by_name['response'].fields.append(
  _RESPONSE.fields_by_name['inference_state'])
_RESPONSE.fields_by_name['inference_state'].containing_oneof = _RESPONSE.oneofs_by_name['response']
DESCRIPTOR.message_types_by_name['Rectangle'] = _RECTANGLE
DESCRIPTOR.message_types_by_name['TensorShape'] = _TENSORSHAPE
DESCRIPTOR.message_types_by_name['ByteTensor'] = _BYTETENSOR
DESCRIPTOR.message_types_by_name['Tuple'] = _TUPLE
DESCRIPTOR.message_types_by_name['FloatTensor'] = _FLOATTENSOR
DESCRIPTOR.message_types_by_name['SparseConfig'] = _SPARSECONFIG
DESCRIPTOR.message_types_by_name['TensorNormalizer'] = _TENSORNORMALIZER
DESCRIPTOR.message_types_by_name['Request'] = _REQUEST
DESCRIPTOR.message_types_by_name['InferenceResult'] = _INFERENCERESULT
DESCRIPTOR.message_types_by_name['InferenceState'] = _INFERENCESTATE
DESCRIPTOR.message_types_by_name['CameraState'] = _CAMERASTATE
DESCRIPTOR.message_types_by_name['FirmwareInfo'] = _FIRMWAREINFO
DESCRIPTOR.message_types_by_name['SystemInfo'] = _SYSTEMINFO
DESCRIPTOR.message_types_by_name['Response'] = _RESPONSE

Rectangle = _reflection.GeneratedProtocolMessageType('Rectangle', (_message.Message,), dict(
  DESCRIPTOR = _RECTANGLE,
  __module__ = 'protocol_pb2'
  # @@protoc_insertion_point(class_scope:spacepark.vision.Rectangle)
  ))
_sym_db.RegisterMessage(Rectangle)

TensorShape = _reflection.GeneratedProtocolMessageType('TensorShape', (_message.Message,), dict(
  DESCRIPTOR = _TENSORSHAPE,
  __module__ = 'protocol_pb2'
  # @@protoc_insertion_point(class_scope:spacepark.vision.TensorShape)
  ))
_sym_db.RegisterMessage(TensorShape)

ByteTensor = _reflection.GeneratedProtocolMessageType('ByteTensor', (_message.Message,), dict(
  DESCRIPTOR = _BYTETENSOR,
  __module__ = 'protocol_pb2'
  # @@protoc_insertion_point(class_scope:spacepark.vision.ByteTensor)
  ))
_sym_db.RegisterMessage(ByteTensor)

Tuple = _reflection.GeneratedProtocolMessageType('Tuple', (_message.Message,), dict(
  DESCRIPTOR = _TUPLE,
  __module__ = 'protocol_pb2'
  # @@protoc_insertion_point(class_scope:spacepark.vision.Tuple)
  ))
_sym_db.RegisterMessage(Tuple)

FloatTensor = _reflection.GeneratedProtocolMessageType('FloatTensor', (_message.Message,), dict(
  DESCRIPTOR = _FLOATTENSOR,
  __module__ = 'protocol_pb2'
  # @@protoc_insertion_point(class_scope:spacepark.vision.FloatTensor)
  ))
_sym_db.RegisterMessage(FloatTensor)

SparseConfig = _reflection.GeneratedProtocolMessageType('SparseConfig', (_message.Message,), dict(

  Thresholding = _reflection.GeneratedProtocolMessageType('Thresholding', (_message.Message,), dict(

    ToIgnore = _reflection.GeneratedProtocolMessageType('ToIgnore', (_message.Message,), dict(
      DESCRIPTOR = _SPARSECONFIG_THRESHOLDING_TOIGNORE,
      __module__ = 'protocol_pb2'
      # @@protoc_insertion_point(class_scope:spacepark.vision.SparseConfig.Thresholding.ToIgnore)
      ))
    ,
    DESCRIPTOR = _SPARSECONFIG_THRESHOLDING,
    __module__ = 'protocol_pb2'
    # @@protoc_insertion_point(class_scope:spacepark.vision.SparseConfig.Thresholding)
    ))
  ,

  FromSparseTensor = _reflection.GeneratedProtocolMessageType('FromSparseTensor', (_message.Message,), dict(
    DESCRIPTOR = _SPARSECONFIG_FROMSPARSETENSOR,
    __module__ = 'protocol_pb2'
    # @@protoc_insertion_point(class_scope:spacepark.vision.SparseConfig.FromSparseTensor)
    ))
  ,
  DESCRIPTOR = _SPARSECONFIG,
  __module__ = 'protocol_pb2'
  # @@protoc_insertion_point(class_scope:spacepark.vision.SparseConfig)
  ))
_sym_db.RegisterMessage(SparseConfig)
_sym_db.RegisterMessage(SparseConfig.Thresholding)
_sym_db.RegisterMessage(SparseConfig.Thresholding.ToIgnore)
_sym_db.RegisterMessage(SparseConfig.FromSparseTensor)

TensorNormalizer = _reflection.GeneratedProtocolMessageType('TensorNormalizer', (_message.Message,), dict(
  DESCRIPTOR = _TENSORNORMALIZER,
  __module__ = 'protocol_pb2'
  # @@protoc_insertion_point(class_scope:spacepark.vision.TensorNormalizer)
  ))
_sym_db.RegisterMessage(TensorNormalizer)

Request = _reflection.GeneratedProtocolMessageType('Request', (_message.Message,), dict(

  LoadModel = _reflection.GeneratedProtocolMessageType('LoadModel', (_message.Message,), dict(
    DESCRIPTOR = _REQUEST_LOADMODEL,
    __module__ = 'protocol_pb2'
    # @@protoc_insertion_point(class_scope:spacepark.vision.Request.LoadModel)
    ))
  ,

  UnloadModel = _reflection.GeneratedProtocolMessageType('UnloadModel', (_message.Message,), dict(
    DESCRIPTOR = _REQUEST_UNLOADMODEL,
    __module__ = 'protocol_pb2'
    # @@protoc_insertion_point(class_scope:spacepark.vision.Request.UnloadModel)
    ))
  ,

  ImageInference = _reflection.GeneratedProtocolMessageType('ImageInference', (_message.Message,), dict(

    ParamsEntry = _reflection.GeneratedProtocolMessageType('ParamsEntry', (_message.Message,), dict(
      DESCRIPTOR = _REQUEST_IMAGEINFERENCE_PARAMSENTRY,
      __module__ = 'protocol_pb2'
      # @@protoc_insertion_point(class_scope:spacepark.vision.Request.ImageInference.ParamsEntry)
      ))
    ,

    SparseConfigsEntry = _reflection.GeneratedProtocolMessageType('SparseConfigsEntry', (_message.Message,), dict(
      DESCRIPTOR = _REQUEST_IMAGEINFERENCE_SPARSECONFIGSENTRY,
      __module__ = 'protocol_pb2'
      # @@protoc_insertion_point(class_scope:spacepark.vision.Request.ImageInference.SparseConfigsEntry)
      ))
    ,
    DESCRIPTOR = _REQUEST_IMAGEINFERENCE,
    __module__ = 'protocol_pb2'
    # @@protoc_insertion_point(class_scope:spacepark.vision.Request.ImageInference)
    ))
  ,

  StartCameraInference = _reflection.GeneratedProtocolMessageType('StartCameraInference', (_message.Message,), dict(

    ParamsEntry = _reflection.GeneratedProtocolMessageType('ParamsEntry', (_message.Message,), dict(
      DESCRIPTOR = _REQUEST_STARTCAMERAINFERENCE_PARAMSENTRY,
      __module__ = 'protocol_pb2'
      # @@protoc_insertion_point(class_scope:spacepark.vision.Request.StartCameraInference.ParamsEntry)
      ))
    ,

    SparseConfigsEntry = _reflection.GeneratedProtocolMessageType('SparseConfigsEntry', (_message.Message,), dict(
      DESCRIPTOR = _REQUEST_STARTCAMERAINFERENCE_SPARSECONFIGSENTRY,
      __module__ = 'protocol_pb2'
      # @@protoc_insertion_point(class_scope:spacepark.vision.Request.StartCameraInference.SparseConfigsEntry)
      ))
    ,
    DESCRIPTOR = _REQUEST_STARTCAMERAINFERENCE,
    __module__ = 'protocol_pb2'
    # @@protoc_insertion_point(class_scope:spacepark.vision.Request.StartCameraInference)
    ))
  ,

  CameraInference = _reflection.GeneratedProtocolMessageType('CameraInference', (_message.Message,), dict(
    DESCRIPTOR = _REQUEST_CAMERAINFERENCE,
    __module__ = 'protocol_pb2'
    # @@protoc_insertion_point(class_scope:spacepark.vision.Request.CameraInference)
    ))
  ,

  StopCameraInference = _reflection.GeneratedProtocolMessageType('StopCameraInference', (_message.Message,), dict(
    DESCRIPTOR = _REQUEST_STOPCAMERAINFERENCE,
    __module__ = 'protocol_pb2'
    # @@protoc_insertion_point(class_scope:spacepark.vision.Request.StopCameraInference)
    ))
  ,

  GetCameraState = _reflection.GeneratedProtocolMessageType('GetCameraState', (_message.Message,), dict(
    DESCRIPTOR = _REQUEST_GETCAMERASTATE,
    __module__ = 'protocol_pb2'
    # @@protoc_insertion_point(class_scope:spacepark.vision.Request.GetCameraState)
    ))
  ,

  ImuSelfTest = _reflection.GeneratedProtocolMessageType('ImuSelfTest', (_message.Message,), dict(
    DESCRIPTOR = _REQUEST_IMUSELFTEST,
    __module__ = 'protocol_pb2'
    # @@protoc_insertion_point(class_scope:spacepark.vision.Request.ImuSelfTest)
    ))
  ,

  GetFirmwareInfo = _reflection.GeneratedProtocolMessageType('GetFirmwareInfo', (_message.Message,), dict(
    DESCRIPTOR = _REQUEST_GETFIRMWAREINFO,
    __module__ = 'protocol_pb2'
    # @@protoc_insertion_point(class_scope:spacepark.vision.Request.GetFirmwareInfo)
    ))
  ,

  GetSystemInfo = _reflection.GeneratedProtocolMessageType('GetSystemInfo', (_message.Message,), dict(
    DESCRIPTOR = _REQUEST_GETSYSTEMINFO,
    __module__ = 'protocol_pb2'
    # @@protoc_insertion_point(class_scope:spacepark.vision.Request.GetSystemInfo)
    ))
  ,

  GetInferenceState = _reflection.GeneratedProtocolMessageType('GetInferenceState', (_message.Message,), dict(
    DESCRIPTOR = _REQUEST_GETINFERENCESTATE,
    __module__ = 'protocol_pb2'
    # @@protoc_insertion_point(class_scope:spacepark.vision.Request.GetInferenceState)
    ))
  ,

  Reset = _reflection.GeneratedProtocolMessageType('Reset', (_message.Message,), dict(
    DESCRIPTOR = _REQUEST_RESET,
    __module__ = 'protocol_pb2'
    # @@protoc_insertion_point(class_scope:spacepark.vision.Request.Reset)
    ))
  ,
  DESCRIPTOR = _REQUEST,
  __module__ = 'protocol_pb2'
  # @@protoc_insertion_point(class_scope:spacepark.vision.Request)
  ))
_sym_db.RegisterMessage(Request)
_sym_db.RegisterMessage(Request.LoadModel)
_sym_db.RegisterMessage(Request.UnloadModel)
_sym_db.RegisterMessage(Request.ImageInference)
_sym_db.RegisterMessage(Request.ImageInference.ParamsEntry)
_sym_db.RegisterMessage(Request.ImageInference.SparseConfigsEntry)
_sym_db.RegisterMessage(Request.StartCameraInference)
_sym_db.RegisterMessage(Request.StartCameraInference.ParamsEntry)
_sym_db.RegisterMessage(Request.StartCameraInference.SparseConfigsEntry)
_sym_db.RegisterMessage(Request.CameraInference)
_sym_db.RegisterMessage(Request.StopCameraInference)
_sym_db.RegisterMessage(Request.GetCameraState)
_sym_db.RegisterMessage(Request.ImuSelfTest)
_sym_db.RegisterMessage(Request.GetFirmwareInfo)
_sym_db.RegisterMessage(Request.GetSystemInfo)
_sym_db.RegisterMessage(Request.GetInferenceState)
_sym_db.RegisterMessage(Request.Reset)

InferenceResult = _reflection.GeneratedProtocolMessageType('InferenceResult', (_message.Message,), dict(

  TensorsEntry = _reflection.GeneratedProtocolMessageType('TensorsEntry', (_message.Message,), dict(
    DESCRIPTOR = _INFERENCERESULT_TENSORSENTRY,
    __module__ = 'protocol_pb2'
    # @@protoc_insertion_point(class_scope:spacepark.vision.InferenceResult.TensorsEntry)
    ))
  ,

  Frame = _reflection.GeneratedProtocolMessageType('Frame', (_message.Message,), dict(
    DESCRIPTOR = _INFERENCERESULT_FRAME,
    __module__ = 'protocol_pb2'
    # @@protoc_insertion_point(class_scope:spacepark.vision.InferenceResult.Frame)
    ))
  ,
  DESCRIPTOR = _INFERENCERESULT,
  __module__ = 'protocol_pb2'
  # @@protoc_insertion_point(class_scope:spacepark.vision.InferenceResult)
  ))
_sym_db.RegisterMessage(InferenceResult)
_sym_db.RegisterMessage(InferenceResult.TensorsEntry)
_sym_db.RegisterMessage(InferenceResult.Frame)

InferenceState = _reflection.GeneratedProtocolMessageType('InferenceState', (_message.Message,), dict(
  DESCRIPTOR = _INFERENCESTATE,
  __module__ = 'protocol_pb2'
  # @@protoc_insertion_point(class_scope:spacepark.vision.InferenceState)
  ))
_sym_db.RegisterMessage(InferenceState)

CameraState = _reflection.GeneratedProtocolMessageType('CameraState', (_message.Message,), dict(
  DESCRIPTOR = _CAMERASTATE,
  __module__ = 'protocol_pb2'
  # @@protoc_insertion_point(class_scope:spacepark.vision.CameraState)
  ))
_sym_db.RegisterMessage(CameraState)

FirmwareInfo = _reflection.GeneratedProtocolMessageType('FirmwareInfo', (_message.Message,), dict(
  DESCRIPTOR = _FIRMWAREINFO,
  __module__ = 'protocol_pb2'
  # @@protoc_insertion_point(class_scope:spacepark.vision.FirmwareInfo)
  ))
_sym_db.RegisterMessage(FirmwareInfo)

SystemInfo = _reflection.GeneratedProtocolMessageType('SystemInfo', (_message.Message,), dict(
  DESCRIPTOR = _SYSTEMINFO,
  __module__ = 'protocol_pb2'
  # @@protoc_insertion_point(class_scope:spacepark.vision.SystemInfo)
  ))
_sym_db.RegisterMessage(SystemInfo)

Response = _reflection.GeneratedProtocolMessageType('Response', (_message.Message,), dict(

  Status = _reflection.GeneratedProtocolMessageType('Status', (_message.Message,), dict(
    DESCRIPTOR = _RESPONSE_STATUS,
    __module__ = 'protocol_pb2'
    # @@protoc_insertion_point(class_scope:spacepark.vision.Response.Status)
    ))
  ,
  DESCRIPTOR = _RESPONSE,
  __module__ = 'protocol_pb2'
  # @@protoc_insertion_point(class_scope:spacepark.vision.Response)
  ))
_sym_db.RegisterMessage(Response)
_sym_db.RegisterMessage(Response.Status)


_REQUEST_IMAGEINFERENCE_PARAMSENTRY.has_options = True
_REQUEST_IMAGEINFERENCE_PARAMSENTRY._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\001'))
_REQUEST_IMAGEINFERENCE_SPARSECONFIGSENTRY.has_options = True
_REQUEST_IMAGEINFERENCE_SPARSECONFIGSENTRY._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\001'))
_REQUEST_STARTCAMERAINFERENCE_PARAMSENTRY.has_options = True
_REQUEST_STARTCAMERAINFERENCE_PARAMSENTRY._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\001'))
_REQUEST_STARTCAMERAINFERENCE_SPARSECONFIGSENTRY.has_options = True
_REQUEST_STARTCAMERAINFERENCE_SPARSECONFIGSENTRY._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\001'))
_INFERENCERESULT_TENSORSENTRY.has_options = True
_INFERENCERESULT_TENSORSENTRY._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\001'))
# @@protoc_insertion_point(module_scope)
